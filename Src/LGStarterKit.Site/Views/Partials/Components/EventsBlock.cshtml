@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@*

    news and events are very similar, and you could just pass things like the 
    doctype and title, in via a viewDataDictionary, and have one partial view

    but in all likelyhood you would want events and news to be different in some
    ways, so they are seperate so you can tweak, 

*@

@{
    if (!Model.Content.HasValue("eventsRoot"))
    {
        return;
    }

    var listRoot =
        Umbraco.TypedContent(Model.Content.GetPropertyValue<int>("eventsRoot"));


    if (listRoot == null)
    {
        return;
    }

    var selection = listRoot.Descendants()
        .Where(x => x.IsVisible() && !x.HasProperty("isComponent"))
        .OrderByDescending(x => x.GetPropertyValue<DateTime>("endDate", x.CreateDate));
}

@if (selection.Any())
{
    <div class="promo-block">
        <h2><a href="@listRoot.Url">Events</a></h2>
        <div class="row">
            @foreach (var item in selection.Take(1))
            {
                <div class="col-xs-12">
                    <div class="promo-item">
                        @DisplayImage(item)

                        <h3>
                            <a href="@item.Url">
                                @item.GetPropertyValue("title", item.Name)
                            </a>
                        </h3>
                        @item.GetPropertyValue("summary")
                    </div>
                </div>

            }
        </div>
    </div>

}

@helper DisplayImage(IPublishedContent item)
{
    if (item.HasProperty("image") && item.HasValue("image"))
    {
        var imageUrl = item.GetCropUrl("image", "Homepage");
        <img src="@imageUrl" alt="@item.GetPropertyValue("title", item.Name)">
    }
}